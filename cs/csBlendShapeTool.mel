//	blendShapeCloner v1.0.1//	Script written by Peter Chapman.//	Email: peter@chapmanstudios.co.uk////	You are welcome to use and distribute this script, however,//	if you do so, send me a quick e-mail with your name and what//	you used it for.////	Also feel free to give me feedback / request changes.////	If you use the script for a commercial project,//	please to contribute via PayPal using the email address//	above!global proc string[] prepareFaceShapes(string $name, float $scale){	string $sel[] = `ls -sl`;	string $buffer[];	tokenize $sel[0] "_" $buffer;	string $shapes[];	$shapes[0] = $sel[0];	string $suffix = "BlendShape";	for ($i=1; $i<34; ++$i){		if ($i == 1) $suffix = "base";		if ($i == 2) $suffix = "dynamics";		if ($i == 3) $suffix = "chest";		if ($i == 4) $suffix = "softEyes";		if ($i == 5) $suffix = "jawOpen";		if ($i == 6) $suffix = "mouthInLf";		if ($i == 7) $suffix = "mouthInRt";		if ($i == 8) $suffix = "mouthOutLf";		if ($i == 9) $suffix = "mouthOutRt";		if ($i == 10) $suffix = "mouthDoLf";		if ($i == 11) $suffix = "mouthDoRt";		if ($i == 12) $suffix = "mouthUpLf";		if ($i == 13) $suffix = "mouthUpRt";		if ($i == 14) $suffix = "lipUpLf";		if ($i == 15) $suffix = "lipUpMid";		if ($i == 16) $suffix = "lipUpRt";		if ($i == 17) $suffix = "lipDoLf";		if ($i == 18) $suffix = "lipDoMid";		if ($i == 19) $suffix = "lipDoRt";		if ($i == 20) $suffix = "eyeLidDoLf";		if ($i == 21) $suffix = "eyeLidDoRt";		if ($i == 22) $suffix = "eyeLidUpLf";		if ($i == 23) $suffix = "eyeLidUpRt";		if ($i == 24) $suffix = "browInnerLf";		if ($i == 25) $suffix = "browInnerRt";		if ($i == 26) $suffix = "browMidLf";		if ($i == 27) $suffix = "browMidRt";		if ($i == 28) $suffix = "browOuterLf";		if ($i == 29) $suffix = "browOuterRt";		if ($i == 30) $suffix = "extra01";		if ($i == 31) $suffix = "extra02";		if ($i == 32) $suffix = "extra03";		if ($i == 33) $suffix = "extra04";		string $temp[] = `duplicate -rr $sel[0]`;		$shapes[$i] = $temp[0];		$shapes[$i] = `rename $shapes[$i] ("bs_" + $name + $suffix)`;		setAttr ($shapes[$i] + ".tx") ($i * $scale);	}	stringArrayRemoveAtIndex 0 $shapes;	string $all[] = $shapes;	$all[size($all)] = $sel[0];	blendShape -n "bsFaceShapes" $all;	string $temp = `group -n ($name + "faceShapes") $shapes`;	setAttr ($temp + ".ty") (1 * $scale);	floatField -e -en 0 ff_scale;	button -e -en 1 btn_mirror;	return $shapes;}global proc mirrorUpdate(string $shapes[], float $scale){	select -r $shapes[6] $shapes[0];	string $newShape = mirrorBlendShape();	}global proc createBlendClone(){	string $sel[] = `ls -sl`;		string $shapes[];		for ($each in $sel){		string $buffer[];		tokenize $each "_" $buffer;		string $new[] = `duplicate -n ("bs_" + $buffer[(size($buffer))-1]) $each`;		$shapes[size($shapes)] = $new[0];		string $newBlend[] = `blendShape -n ("BS" + $buffer[(size($buffer))-1]) $new[0] $each`;		setAttr ($newBlend[0] + "." + $new[0]) 1;    }		string $shapesGrp = `group -w -n ($sel[0] + "Shapes") $shapes`;	select -r $shapesGrp;}global proc makeBlendShapeFrom(){	string $sel[] = `ls -sl`;	string $mesh[];		if (size($sel) == 1) $mesh = `listRelatives $sel`;	else $mesh = $sel;		string $shapes[];		for ($each in $mesh){			string $dup[] = `duplicate -n ($each + "New") $each`;		$shapes[size($shapes)] = $dup[0];		string $blendShape[] = `blendShape -n ("bs_" + $each) $each $dup[0]`;		setAttr ($blendShape[0] + "." + $each) 1;    }		string $newGrp = `group -w -n "newShapes" $shapes`;	select -r $newGrp;}global proc mirrorBlendShape(){	string $sel[] = `ls -sl`;	string $base = $sel[(size($sel))-1];	stringArrayRemoveAtIndex((size($sel)-1), $sel);		for ($each in $sel){		string $shape = $each;		string $nShape[] = `duplicate -name ($each + "Mirror") $base`;		string $temp[] = `duplicate $base`;		string $blendName[] = `blendShape -name "tmpBlend" $shape $temp[0]`;		setAttr -l 0 ($temp[0] + ".scaleX");		setAttr ($temp[0] + ".scaleX") (-1);		string $grp = `group $temp[0] $nShape[0]`;		setAttr ($grp + ".s") 50 50 50;		select -r $nShape[0] $temp[0];		string $wrapName[] = `doWrapArgList "2" { "1","0","0.01" }`;		setAttr ($blendName[0] + "." + $shape) 1;		DeleteHistory;		setAttr ($grp + ".s") 1 1 1;		parent -w $nShape;		delete $grp;	}}global proc mirrorBlendShapeFB(){	string $sel[] = `ls -sl`;	string $base = $sel[(size($sel))-1];	stringArrayRemoveAtIndex((size($sel)-1), $sel);		for ($each in $sel){		string $shape = $each;		string $nShape[] = `duplicate -name ($each + "Mirror") $base`;		string $temp[] = `duplicate $base`;		string $blendName[] = `blendShape -name "tmpBlend" $shape $temp[0]`;		setAttr -l 0 ($temp[0] + ".scaleZ");		setAttr ($temp[0] + ".scaleZ") (-1);		string $grp = `group $temp[0] $nShape[0]`;		setAttr ($grp + ".s") 50 50 50;		select -r $nShape[0] $temp[0];		string $wrapName[] = `doWrapArgList "2" { "1","0","0.01" }`;		setAttr ($blendName[0] + "." + $shape) 1;		DeleteHistory;		setAttr ($grp + ".s") 1 1 1;		parent -w $nShape;		delete $grp;	}}global proc prepareEyes(int $pupilOn){	string $sel[] = `ls -sl`;		string $targets[] = $sel;	string $shapes[];	string $shapes2[];		for ($each in $targets){		string $buffer[];		tokenize $each "_" $buffer;		string $new[] = `duplicate -n ("bs_shape_" + $buffer[(size($buffer))-1]) $each`;		$shapes[size($shapes)] = $new[0];		string $newBlend[] = `blendShape -n ("BS" + $buffer[(size($buffer))-1]) $new[0] $each`;		setAttr ($newBlend[0] + "." + $new[0]) 1;    }		move -r 0 0 5 $shapes;		for ($each in $shapes){		string $buffer[];		tokenize $each "_" $buffer;		string $new[] = `duplicate -n ("bs_rot_" + $buffer[(size($buffer))-1]) $each`;		$shapes2[size($shapes2)] = $new[0];		string $newBlend[] = `blendShape -n ("BS" + $buffer[(size($buffer))-1]) $new[0] $each`;		setAttr ($newBlend[0] + "." + $new[0]) 1;    }		move -r 0 0 5 $shapes2;		string $lattice[] = `lattice  -n "lat_eye" -divisions 4 4 4 -objectCentered true  -ldv 4 4 4 $shapes`;	setAttr ($lattice[0] + ".outsideLattice") 1;		if ($pupilOn){		string $pupil = $shapes2[(size($shapes2) - 1)];		string $buffer[];		tokenize $pupil "_" $buffer;		string $new[] = `duplicate -n ("bs_pupil_" + $buffer[(size($buffer))-1]) $pupil`;		string $newBlend[] = `blendShape -n ("BS" + $buffer[(size($buffer))-1]) $new[0] $pupil`;		setAttr ($newBlend[0] + "." + $new[0]) 1;				move -r 0 0 5 $new[0];				select -r $new[0];		newCluster " -n \"cl_pupil\" -envelope 1";	}		select -r $shapes2;	newCluster " -n \"cl_eyeRot\" -envelope 1";		}global proc csBlendShapeToolsMenu(){	source generateChannelMenu.mel;	string $base = "";	string $target[];  	if(`window -q -ex csBlendShapeToolsMenu`){  		deleteUI csBlendShapeToolsMenu;	}	    window		-rtf 1		-mnb 0		-mxb 0		-s 0		-title "Blend Shape Tools"		csBlendShapeToolsMenu;	    columnLayout ColumnLayout;		frameLayout -w 300 -l "General BlendShape Tools";			columnLayout;				button -bgc 0 1 0 -w 300 -l "Create Blend Shape Clones from Selected" -c "createBlendClone()";				button -bgc 0 1 0.5 -w 300 -l "Use Selected as Blend Shapes" -c "makeBlendShapeFrom()";				button -bgc 0 1 1 -w 300 -l "Mirror Blend Shape" -c "mirrorBlendShape()";				button -bgc 0.5 1 1 -w 300 -l "Mirror Blend Shape Front/Bacl" -c "mirrorBlendShapeFB()";			setParent ..;		setParent ..;		frameLayout -w 300 -l "Face Rig Tools";			rowLayout -nc 2 -cw2 148 148;				text -l "Distribution Scale" ;				floatField -v 10 ff_scale;			setParent ..;			rowLayout -nc 2 -cw2 148 148;				text -l "Name Prefix";				textField -w 148 tx_name;			setParent ..;			columnLayout;				button -bgc 0 1 1 -w 300 -l "Prepare Common BlendShapes From Selected" -c "string $shapes[] = prepareFaceShapes(`textField -q -tx tx_name`, `floatField -q -v ff_scale`)";				button -bgc 1 1 0 -w 300 -l "Mirror and Update Right Nodes" -c "mirrorUpdate($shapes, `floatField -q -v ff_scale`)" -en 0 btn_mirror;				checkBox -l "Last Object is Pupil" -v 0 cb_pupil;				button -bgc 0 1 1 -w 300 -l "Prepare Eyes From Selected" -c "prepareEyes(`checkBox -q -v cb_pupil`)";			setParent ..;		setParent ..;	setParent ..;		showWindow csBlendShapeToolsMenu;	window -e -w 300 -h 300 csBlendShapeToolsMenu;}csBlendShapeToolsMenu();