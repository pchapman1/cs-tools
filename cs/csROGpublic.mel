//	Duplicate Along Curve v1.4.4
//	Script written by Peter Chapman.
//	Email: peter@chapmanstudios.co.uk
//
//	You are welcome to use and distribute this script, however,
//	if you do so, send me a quick e-mail with your name and what
//	you used it for.
//
//	Also feel free to give me feedback / request changes.
//
//	If you end up using the script for a commercial project,
//	feel free to contribute via PayPal using the email address
//	above!

source generateChannelMenu.mel;
// source Progress Window
source "cs/csProgBar.mel";
// Delete Pillars
global proc deletePillars(){
    string $sel[] = `ls -sl`;
	int $i;
	
	if (size($sel) != 1){
	    print "More than 1 object selected \n";
    }
	
    else{
        string $cNode = $sel[0];
		
        if (`attributeQuery -node $cNode -exists "pillarsNode"`){
		
			if (`attributeQuery -node $cNode -exists "referencePillars"`){
				string $pillarsNode = `getAttr ($cNode + ".pillarsNode")`;
				string $pillars[] = `listRelatives -type "transform" $pillarsNode`;
				string $split[];
				
				for ($each in $pillars){
					++$i;
					int $interrupt = progWindow($i, size($pillars));
					if ($interrupt == 1){
						break;
					}
					tokenize $each ":" $split;
					string $pillar = ($split[0] + "RN");
					file -removeReference -referenceNode $pillar;
                }
				
				deleteAttr ($cNode + ".referencePillars");
            }
			
            deleteAttr ($cNode + ".pillarControls");
            deleteAttr ($cNode + ".pillarScale");
            deleteAttr ($cNode + ".pillarHeight");
            string $pillarNode =  `getAttr ($cNode + ".pillarsNode")`;
            delete $pillarNode;
            deleteAttr ($cNode + ".pillarsNode");
        }
		
        else{
            print "No pillars to delete";
        }
    }
}
// Build Pillars (Basic)
global proc buildPillarsBasic(int $n){

    //Get Data
    string $sel[] = `ls -sl`;
	
	if (size($sel) != 1){
	    print "More than 1 object selected \n";
    }
    
    else {
    
    	string $cNode = $sel[0];
    
    	if (`attributeQuery -node $cNode -exists "rogControls"`){
			
			float $pillarScale = 1;
			float $pillarHeight = 1;
			
			if (`attributeQuery -node $cNode -exists "pillarControls"`){
				$pillarScale = `getAttr ($cNode + ".pillarScale")`;
				$pillarHeight = `getAttr ($cNode + ".pillarHeight")`;
				deletePillars();
            }
			
    		string $targetCurve = `getAttr ($cNode + ".targetCurve")`;
    		string $piecesNode = `getAttr ($cNode + ".piecesNode")`;
    		string $pieces[] = `listRelatives -children $piecesNode`;
	
	    	//Add Pillar Control to Control Node
	    	addAttr -ln "pillarControls"  -at bool  $cNode;
	    	setAttr -e-channelBox true ($cNode + ".pillarControls") 1;
	    	addAttr -ln "pillarScale" -at double $cNode;
			setAttr -e-keyable true ($cNode + ".pillarScale") $pillarScale;
			addAttr -ln "pillarHeight" -at double $cNode;
			setAttr -e-keyable true ($cNode + ".pillarHeight") $pillarHeight;
	
	    	string $pillarsNode = `createNode -n pillarsNode transform`;
	    	string $new[] = `parent $pillarsNode $cNode`;
	    	string $pillarsNode = $new[0];
	    	addAttr -ln "pillarsNode"  -dt "string"  $cNode;
	    	setAttr -e -channelBox true -type "string" ($cNode + ".pillarsNode") $pillarsNode;
	
	    	//Build Pillars
		    
   	 		for ($i = 0; $i < size($pieces); $i = ($i + $n)){
			
   	     		int $interrupt = progWindow($i, size($pieces));
				if ($interrupt == 1){
					break;
				}
				
				pillarBasic($i);
				
    		    string $sel[] = `ls - sl`;
    	    	string $pillar[];
    	    	string $new[] = `parent $sel[0] $pillarsNode`;
    	    	$pillar[$i] = $new[0];
    	    
    	    	//Get Pillar Data
    	    	string $pillarBaseCC = `getAttr ($pillar[$i] + ".baseCCName")`;
    	    	string $pillarTopCtrl = `getAttr ($pillar[$i] + ".topCtrlName")`;
    	    	string $pillarTopCluster = `getAttr ($pillar[$i] + ".topClusterName")`;
    		    	
       	 		//Connect To Control Node
       	 		connectAttr -f ($cNode + ".pillarScale") ($pillarBaseCC + ".sx");
        		connectAttr -f ($cNode + ".pillarScale") ($pillarBaseCC + ".sy");
        		connectAttr -f ($cNode + ".pillarScale") ($pillarBaseCC + ".sz");
        		connectAttr -f ($cNode + ".pillarHeight") ($pillarTopCluster + ".ty");
        		
        		//Connect To Track
        		connectAttr -f ($pieces[$i] + ".tx") ($pillarBaseCC + ".tx");
        		connectAttr -f ($pieces[$i] + ".tz") ($pillarBaseCC + ".tz");
        		connectAttr -f ($pieces[$i] + ".ty") ($pillarTopCtrl + ".ty");
        		
        		//HideUnrequiredNodes
        		setAttr -keyable false -channelBox false ($pillarBaseCC + ".tx");
        		setAttr -keyable false -channelBox false ($pillarBaseCC + ".tz");
        		setAttr -keyable false -channelBox false ($pillarBaseCC + ".rx");
        		setAttr -keyable false -channelBox false ($pillarBaseCC + ".ry");
        		setAttr -keyable false -channelBox false ($pillarBaseCC + ".rz");
        		setAttr -keyable false -channelBox false ($pillarBaseCC + ".sx");
        		setAttr -keyable false -channelBox false ($pillarBaseCC + ".sy");
        		setAttr -keyable false -channelBox false ($pillarBaseCC + ".sz");
        		setAttr -keyable false -channelBox false ($pillarBaseCC + ".ry");
        		setAttr -keyable false -channelBox false ($pillarBaseCC + ".rz");
        		setAttr -keyable false -channelBox false ($pillarBaseCC + ".v");
    		}
    		
    		select $cNode;
		
        }

		else{
	        print "This is not a valid control Node";
    	}
    }
}
// Build Pillars (Cross)
global proc buildPillarsCross(int $n){
	//Get Data
    string $sel[] = `ls -sl`;
	
	if (size($sel) != 1){
	    print "More than 1 object selected \n";
    }
    
    else {
    
    	string $cNode = $sel[0];
    
    	if (`attributeQuery -node $cNode -exists "rogControls"`){
		
			if (`attributeQuery -node $cNode -exists "pillarControls"`){
				deletePillars();
            }
			
			string $targetCurve = `getAttr ($cNode + ".targetCurve")`;
    		string $piecesNode = `getAttr ($cNode + ".piecesNode")`;
    		string $pieces[] = `listRelatives -children $piecesNode`;
	
	    	//Add Pillar Control to Control Node
	    	addAttr -ln "pillarControls"  -at bool  $cNode;
	    	setAttr -e-channelBox true ($cNode + ".pillarControls") 1;
	    	addAttr -ln "pillarScale" -at double $cNode;
			setAttr -e-keyable true ($cNode + ".pillarScale") 1;
			addAttr -ln "pillarHeight" -at double $cNode;
			setAttr -e-keyable true ($cNode + ".pillarHeight") 0;
			
			addAttr -ln "referencePillars"  -at bool  $cNode;
	    	setAttr -e-channelBox true ($cNode + ".referencePillars") 1;
			
			//Create Pillars Node
			string $pillarsNode = `createNode -n pillarsNode transform`;
			string $pillars[];
			
			//Build Cross Pillars
			
			for ($i = 0; $i < size($pieces); $i = ($i + $n)){
			
				int $interrupt = progWindow($i, size($pieces));
				if ($interrupt == 1){
					break;
				}
			
				//Reference New Pillar
				
				file
					-r
					-type "mayaBinary" 
					-ignoreVersion
					-gl
					-loadReferenceDepth "all"
					-namespace ($cNode + "Strut" + $i)
					-options "v=0" "Z:/roller/production/enviroments/rollerCoaster/scenes/strut2.mb";
					
				string $nameSpace = ($cNode + "Strut" + $i);
				$pillar = ("|" + $nameSpace + ":strut");
				
				//Connect To Control Node
       	 		connectAttr -f ($cNode + ".pillarScale") ($nameSpace + ":cc_strutCtrl.sx");
        		connectAttr -f ($cNode + ".pillarScale") ($nameSpace + ":cc_strutCtrl.sy");
        		connectAttr -f ($cNode + ".pillarScale") ($nameSpace + ":cc_strutCtrl.sz");
        		connectAttr -f ($cNode + ".pillarHeight") ($nameSpace + ":autoHeight.ty");
        		
        		//Connect To Track
        		connectAttr -f ($pieces[$i] + ".tx") ($nameSpace + ":autoBase.tx");
        		connectAttr -f ($pieces[$i] + ".tz") ($nameSpace + ":autoBase.tz");
				connectAttr -f ($pieces[$i] + ".ry") ($nameSpace + ":cc_strutCtrl.ry");
        		connectAttr -f ($pieces[$i] + ".ty") ($nameSpace + ":cc_strutTop.ty");
				connectAttr -f ($pieces[$i] + ".rx") ($nameSpace + ":cc_strutTop.rx");
				
				parent $pillar $pillarsNode;
            }
			
			//CleanUp Scene
			string $t[] = `parent $pillarsNode $cNode`;
			string $pillarsNode = $t[0];
			addAttr -ln "pillarsNode"  -dt "string"  $cNode;
	    	setAttr -e -channelBox true -type "string" ($cNode + ".pillarsNode") $pillarsNode;
		}
		
		else{
			print "Not a valid Control Node";
        }
    }
}
// Build Single Pillar
global proc pillarBasic(int $i){

    //build Pillar
    string $new[] = `polyCylinder -ch off -o on -r 3 -h 0 -sa 14 -sc 1 -cuv 3 -n ("meshPillar" + $i)`;
    string $pillarMesh = $new[0];
        
    //Create Pillar Clusters
    select -r ($pillarMesh + ".vtx[14:27]") ($pillarMesh + ".vtx[29]");
        string $new[] = `newCluster " -envelope 1 -n cl_pillarTop"`;
        string $topCluster = $new[1];
        setAttr ($topCluster + ".v") 0;
    select -r ($pillarMesh + ".vtx[0:13]") ($pillarMesh + ".vtx[28]");
        string $new[] = `newCluster " -envelope 1 -n cl_pillarBase"`;
        string $baseCluster = $new[1];
        setAttr ($baseCluster + ".v") 0;
    
    //build Pillar Base
    string $new[] = `polyCylinder -ch off -o on -r 5 -h 4 -sa 20 -sc 1 -cuv 3 -n ("meshPillarBase" + $i)`;
        string $pillarBaseMesh = $new[0];
        move -r 0 2 0 ($pillarBaseMesh + ".vtx[0:41]");
        move 0 0 0 ($pillarBaseMesh + ".scalePivot") ($pillarBaseMesh + ".rotatePivot");
        
    //build Pillar Control
    string $new[] = `circle -ch off -o on -nr 0 1 0 -r 9 -n ("cc_pillarBase" + $i)`;
        string $pillarBaseCC = $new[0];
        move -r 0 15 0 ($pillarBaseCC + ".cv[0]") ($pillarBaseCC + ".cv[2]") ($pillarBaseCC + ".cv[4]") ($pillarBaseCC + ".cv[6]");
        move -r 0 -5 0 ($pillarBaseCC + ".cv[0:7]");
        
    //Create Structure
    string $pillarMeshGrp = `group -n ("pillarMeshGrp" + $i) $pillarMesh`;
    string $pillarBaseMeshGrp = `group -n ("pillarBaseMeshGrp" + $i) $pillarBaseMesh`;
        move 0 0 0 ($pillarBaseMeshGrp + ".scalePivot") ($pillarBaseMeshGrp + ".rotatePivot");
    string $pillarTopCtrlGrp = `group -n ("pillarTopCtrlGrp" + $i) $topCluster`;
        move 0 0 0 ($pillarTopCtrlGrp + ".scalePivot") ($pillarTopCtrlGrp + ".rotatePivot");
    parent $baseCluster $pillarBaseCC;
    string $pillarCtrlGrp = `group -n ("pillarCtrl" + $i) $pillarBaseCC $pillarTopCtrlGrp`;
    string $pillar = `group -n ("pillar" + $i) $pillarMeshGrp $pillarBaseMeshGrp $pillarCtrlGrp`;

    //Connections
    
    connectAttr -f ($pillarBaseCC + ".t") ($pillarBaseMeshGrp + ".t");
    connectAttr -f ($pillarBaseCC + ".r") ($pillarBaseMeshGrp + ".r");
    connectAttr -f ($pillarBaseCC + ".s") ($pillarBaseMeshGrp + ".s");
    connectAttr -f ($pillarBaseCC + ".tx") ($pillarTopCtrlGrp + ".tx");
    connectAttr -f ($pillarBaseCC + ".tz") ($pillarTopCtrlGrp + ".tz");
    connectAttr -f ($pillarBaseCC + ".s") ($pillarTopCtrlGrp + ".s");
    
    //Store Data
    addAttr -ln "baseCCName"  -dt "string"  $pillar;
        setAttr -e -channelBox true -type "string" ($pillar + ".baseCCName") $pillarBaseCC;
    addAttr -ln "topCtrlName"  -dt "string"  $pillar;
        setAttr -e -channelBox true -type "string" ($pillar + ".topCtrlName") $pillarTopCtrlGrp;
    addAttr -ln "topClusterName" -dt "string" $pillar;
        setAttr -e -channelBox true -type "string" ($pillar + ".topClusterName") $topCluster;
}
// Reset the ROG
global proc resetRog(int $n){

    string $sel[] = `ls -sl`;
    string $cNode = $sel[0];
	
	if (`attributeQuery -node $cNode -exists "pillarControls"`){
		deletePillars();
    }
	
    if (`attributeQuery -node $cNode -exists "rogControls"`){
    	string $tCurve = `getAttr ($cNode + ".targetCurve")`;
        string $t[] = `parent -world $tCurve`;
        string $tCurve = $t[0];
    	string $piece = `getAttr ($cNode + ".piece")`;
    	delete $cNode;
        select -r $tCurve $piece;
        dupAlongCurve($n);
    }
	
    else {
        print "Not enough objects selected, or object not a controlNode \n";
    }
}
// Make Beams
global proc makeBeams(){

	// Get Selection (select the controlNode)

	string $sel[] = `ls -sl`;
	
	if (size($sel) != 1){
	    print "More than 1 object selected, or no objects selected. \n";
    }
    
	else{
		
		string $cNode = $sel[0];
		
		if (`attributeQuery -node $cNode -exists "rogControls"`){
		
			// Get Data
		
			string $piecesNode = `getAttr ($cNode + ".piecesNode")`;
			string $pieces[] = `listRelatives -type "transform" $piecesNode`;
			string $nurbs[] = `ls -dag -type "nurbsCurve" $pieces[0]`;
			string $nurbsTransform[] = `listRelatives -parent $nurbs`;
			string $loft[];
			string $lofts[];
		
		    // For each piece, create a list of each nurbs object
			for ($i = 0; $i < (size($nurbs)); ++$i){
			    
				int $interrupt = progWindow($i, size($nurbs));
				if ($interrupt == 1){
					break;
				}
			
			    for ($x = 0; $x < (size($pieces)); ++$x){
			        $loft[$x] = ($pieces[$x] + "|" + $nurbsTransform[$i]);
			    }
			    
		        // Create a loft for each nurbs list
		        string $t[] = `loft $loft`;
			    $lofts[$i] = $t[0];
			}
			
			// Cleanup lofts into a group + Parent lofts group to Control Node
			string $loftsNode = `group -n loftsNode $lofts`;
			string $t[] = `parent ("|" + $loftsNode) $cNode`;
			string $loftsNode = $t[0];
			
			select $cNode;
			print "Complete \n";
		}
		
		else{
			print "Not a valid Control Node";
        }
    }
	
}
// Align Fences together
global proc alignFences(){

	// Get Selection (select the controlNode)

	string $sel[] = `ls -sl`;
	
	if (size($sel) != 1){
	    print "More than 1 object selected \n";
    }
	
	else{
		string $cNode = $sel[0];
		
		if (`attributeQuery -node $cNode -exists "rogControls"`){
				
			// Get Data

			string $piecesNode = `getAttr ($cNode + ".piecesNode")`;
			string $pieces[] = `listRelatives -type "transform" $piecesNode`;
			string $locNode = `getAttr ($cNode + ".locNode")`;  
			string $loc[] = `listRelatives -type "transform" $locNode`;

			// Use the next object in line's pivot as an aim constraint
    		// break previous connection
    
			for ($i = 0; $i < (size($pieces)-1); ++$i){
			    
				int $interrupt = progWindow($i, (size($pieces)-1));
				if ($interrupt == 1){
					break;
				}
			
				string $motionPath = `getAttr ($pieces[$i] + ".motionPath")`;
	
    		    CBdeleteConnection ($pieces[$i] + ".rx");
    		    CBdeleteConnection ($pieces[$i] + ".ry");
    		    CBdeleteConnection ($pieces[$i] + ".rz");
       
        		aimConstraint
        		    -offset 0 0 0
        		    -weight 1
        		    -aimVector 0 0 -1
        		    -upVector 0 1 0
        		    -worldUpType "object"
        		    -worldUpObject $loc[($i + 1)]
        		    $pieces[($i+1)] $pieces[$i];
			}
			
			select $cNode;
			print "Complete \n";
        }
		
		else{
			print "Not a valid Control Node";
        }
    }
}
//Duplicate Along Curve
global proc dupAlongCurve(int $n){

    cycleCheck -e off;
    
    //get data

    string $sel[] = `ls -sl`;
    
    if (size($sel) == 1){
        resetRog($n);
    }
	
    else {
    	string $targetCurve = `rename $sel[0] targetCurve0`;
    	string $piece = `rename $sel[1] piece0`;
	
	    //create Curve Control Node and Heirarchy
	
	    string $cNode = `createNode -n controlNode transform`;
	    string $curvesNode = `createNode -n curvesNode transform`;
	    string $piecesNode = `createNode -n piecesNode transform`;
	    string $locNode = `createNode -n locatorNode transform`;
	    
	    setAttr ($locNode + ".v") 0;
	
	    //SetUpControlNode
	    addAttr -ln "rogControls"  -at bool  $cNode;
	    setAttr -e-channelBox true ($cNode + ".rogControls") 1;
	    addAttr -ln "bank"  -at double $cNode;
	    setAttr -e-keyable true ($cNode + ".bank");
	    addAttr -ln "objScale" -at double $cNode;
		setAttr -e-keyable true ($cNode + ".objScale") 1;
	    
	    setAttr -lock true -keyable false -channelBox false ($cNode + ".tx");
	    setAttr -lock true -keyable false -channelBox false ($cNode + ".ty");
	    setAttr -lock true -keyable false -channelBox false ($cNode + ".tz");
	    setAttr -lock true -keyable false -channelBox false ($cNode + ".rx");
	    setAttr -lock true -keyable false -channelBox false ($cNode + ".ry");
	    setAttr -lock true -keyable false -channelBox false ($cNode + ".rz");
	    setAttr -lock true -keyable false -channelBox false ($cNode + ".sx");
	    setAttr -lock true -keyable false -channelBox false ($cNode + ".sy");
	    setAttr -lock true -keyable false -channelBox false ($cNode + ".sz");
	    setAttr -lock true -keyable false -channelBox false ($cNode + ".v");
	    
	    //Create Offset Curve for loops
	
	    string $t[] = `offsetCurve
	        -ch on
	        -rn false
	        -cb 2
	        -st true
	        -cl false
	        -cr 0
	        -d 0
	        -tol 0.01
	        -sd 0
	        -ugn false 
	        $targetCurve`;
			
	    string $objUpCurve = $t[0];
	    setAttr ($objUpCurve + ".ty") 1;
	
	    //duplicate pieces
	    float $pieceLoc = 0;
		
	    for ($i = 0; $i < $n; ++$i){
	        
	        float $oneHundred = 100;
			
			if ($i != 0){
			    float $one = 1.000;
			    $pieceLoc = ($i * ($one / $n));
			}
			
			int $interrupt = progWindow($i, $n);
			if ($interrupt == 1){
				break;
			}
	
	        string $t[] = `spaceLocator -p 0 0 0`;
	        $cLoc = `parent $t[0] $locNode`;
	
	        select $cLoc $objUpCurve;
	        string $motionPath = `pathAnimation
	            -fractionMode true
	            -follow true
	            -followAxis z
	            -upAxis y
	            -worldUpType "object"
	            -worldUpObject $cLoc
	            -inverseUp false
	            -inverseFront false
	            -bank true`;
	        disconnectAttr ($motionPath +"_uValue.output") ($motionPath + ".uValue");
	        setAttr ($motionPath + ".uValue") $pieceLoc;
	
	        string $t[] = `instance $piece`;
	        string $t[] = `parent $t[0] $piecesNode`;
	        string $cPiece = $t[0];
	        
	        select $cPiece $targetCurve;
	        string $motionPath = `pathAnimation
	            -fractionMode true
	            -follow true
	            -followAxis z
	            -upAxis y
	            -worldUpType "object"
	            -worldUpObject $cLoc
	            -inverseUp false
	            -inverseFront false
	            -bank true`;
	        disconnectAttr ($motionPath +"_uValue.output") ($motionPath + ".uValue");
	        setAttr ($motionPath + ".uValue") $pieceLoc;
	        connectAttr -f ($cNode + ".bank") ($motionPath + ".bankScale");
	        connectAttr -f ($cNode + ".objScale") ($cPiece + ".sx");
			connectAttr -f ($cNode + ".objScale") ($cPiece + ".sy");
			connectAttr -f ($cNode + ".objScale") ($cPiece + ".sz");
			
			//Store motionPath name for each duplicate
			addAttr -ln "motionPath" -dt "string" $cPiece;
	    	setAttr -e -channelBox true -type "string" ($cPiece + ".motionPath") $motionPath;
	   }
    
    //CleanUp
    parent $targetCurve $objUpCurve $curvesNode;
    parent $curvesNode $cNode;
    string $t[] = `parent $locNode $cNode`;
    string $locNode = $t[0];
    string $t[] = `parent $piecesNode $cNode`;
    string $piecesNode = $t[0];
    
    //Store Data

    addAttr -ln "piece" -dt "string" $cNode;
    setAttr -e -channelBox true -type "string" ($cNode + ".piece") $piece;
    addAttr -ln "targetCurve" -dt "string" $cNode;
    setAttr -e -channelBox true -type "string" ($cNode + ".targetCurve") ($cNode + "|" + $curvesNode + "|" + $targetCurve);
    addAttr -ln "offsetCurve" -dt "string" $cNode;
    setAttr -e -channelBox true -type "string" ($cNode + ".offsetCurve") $objUpCurve;
    addAttr -ln "locNode" -dt "string" $cNode;
    setAttr -e -channelBox true -type "string" ($cNode + ".locNode") $locNode;
    addAttr -ln "piecesNode" -dt "string" $cNode;
    setAttr -e -channelBox true -type "string" ($cNode + ".piecesNode") $piecesNode;
    
    select $cNode;
    print "Complete \n";
    }
}
// Select Objects, Target and Offset Curve
global proc selectObj(int $n){
    
    string $sel[] = `ls -sl`;
	
	if (size($sel) != 1){
	    print "More than 1 object selected, or no objects selected. \n";
	    stop;
    }
	
    string $cNode = $sel[0];
    
	if (`attributeQuery -node $cNode -exists "rogControls"`){
    	string $target = "";
    	if ($n == 1){
    	    $target = "targetCurve";
    	}
		
    	else if ($n == 2){
    	    $target = "offsetCurve";
    	}
    	select `getAttr ($cNode + "." + $target)`;
    }
	
	else{
		print "Not a valid Control Node";
    }
}
// Complete Circle
global proc completeCircle(){

    string $sel[] = `ls -sl`;
	
	if (size($sel) != 1){
	    print "More than 1 object selected, or no objects selected. \n";
	    stop;
    }
    
    string $cNode = $sel[0];
	
	if (`attributeQuery -node $cNode -exists "rogControls"`){
    	string $piecesNode = `getAttr ($cNode + ".piecesNode")`;
    	string $pieces[] = `listRelatives -type "transform" $piecesNode`;
    	string $new[] = `instance $pieces[0]`;
    	setAttr ($new[0] + ".v") 0;
    	parentConstraint $pieces[0] $new[0];
    	connectAttr -f ($cNode + ".objScale") ($new[0] + ".sx");
		connectAttr -f ($cNode + ".objScale") ($new[0] + ".sy");
		connectAttr -f ($cNode + ".objScale") ($new[0] + ".sz");
    }
	
	else{
		print "Not a valid Control Node";
    }
}
// Launch Pillar Menu
global proc pillarMenu(){

    source generateChannelMenu.mel;
	
    if(`window -q -ex pillarMenu`){
      deleteUI pillarMenu;
    }

    window  -w 160 -h 200 -title "Pillar Menu" pillarMenu;
    columnLayout ColumnLayout;
    
	text -l "";
    text -w 150 -l "Select Control Node";
    text -l "";
    text -l "";
    
    button
		-w 150
        -label "Delete Pillars"
        -ann "Select: Control Node"
        -c "deletePillars()";
    
    text -l "";
    text -w 150 -l "Build a Pillar per X tracks";
    
	intField 
		-w 150
		-v 5
		pillarIntField;
	
	text -l "";
    text -l "Choose Pillar Style Below";
	
	button
		-w 150
        -label "Basic Pillars"
        -ann "Select: Control Node"
        -c "buildPillarsBasic(`intField -q -v pillarIntField`)";
   
    showWindow pillarMenu;
	window -e -w 160 -h 300 pillarMenu;
	
}
// Launch ROG Help Menu
global proc rogHelpMenu(){

	source generateChannelMenu.mel;
	
    if(`window -q -ex rogHelpMenu`){
      deleteUI rogHelpMenu;
    }

    window  -w 400 -h 500 -title "Help / About" rogHelpMenu;
    columnLayout ColumnLayout;

	scrollField
		-w 390
		-h 470
		-wordWrap true
		-editable false
		-text ("This script will take a Group of objects and duplicate them along a specified curve."
			+ "If the group contains curves, these"
			+ "can be lofted after creation using the 'Make Beams' command."
			+ "You can edit the shape, angle and scale of the track and"
			+ "pillars dynamically after creation. You can also change the"
			+ "pillar rate and number of duplicates at anytime by selecting"
			+ "the control node and entering a new value."
			+ "\n\n\n\n\n\n\n"
			+ "Script written by Peter Chapman.\n"
			+ "Email:  peter@chapmanstudios.co.uk"
			+ "\n\n\n\n\n\n\n"
			+ "You are welcome to use and distribute this script, however,"
			+ "if you do so, send me a quick e-mail with your name and what"
			+ "you used it for."
			+ "\n\n"
			+ "Also feel free to give me feedback / request changes."
			+ "\n\n"
			+ "If you end up using the script for a commercial project,"
			+ "feel free to contribute via PayPal using the email address"
			+ "above!");
	
	showWindow rogHelpMenu;
	window -e -w 400 -h 500 rogHelpMenu;
}
//Launch ROG Menu
global proc rogMenu(){

    source generateChannelMenu.mel;
	
     if(`window -q -ex ROGMenu`){
      deleteUI ROGMenu;
    }

    window  -w 160 -h 500 -title "ROG" ROGMenu;
    columnLayout ColumnLayout;
    
	button
		-w 150
        -l "Help/About"
        -ann "Help/About"
        -c "rogHelpMenu()";
	
	text -w 150 -l "Select the curve";
	text -w 150 -l "Ctrl/Shift Select the";
    text -w 150 -l "Grp you wish to";
    text -w 150 -l "Duplicate.";
    text -l "";

	text -w 150 -l "no. of duplicates:";
	floatField
		-w 150
		-v 10
		nFloatField;
	
	button
		-w 150
        -label "Duplicate Along Curve"
        -ann "Select: curve, then piece grp"
        -c "dupAlongCurve(`floatField -q -v nFloatField`)";

    text -l "";
    text -w 150 -l "PRESETS:";
    text -l "";
    text -w 150 -l "Select the Control Node";
    text -w 150 -l "you wish to apply a      ";
    text -w 150 -l "preset too.                   ";

    button
		-w 150
        -l "Complete Circle"
        -ann "Select the ControlNode"
        -c "completeCircle()";
    
    button
		-w 150
        -l "Fence"
        -ann "Select the ControlNode"
        -c "alignFences()";
    
    button
		-w 150
        -l "Make Beams"
        -ann "Select the ControlNode"
        -c "makeBeams()";
    
    text -l "";
    button
		-w 150
        -l "Pilar Menu"
        -ann "Select the ControlNode"
        -c "pillarMenu()";
    
    text -l "";
    text -w 150 -l "SELECT CONTROL:";
    text -l "";
    
    button
		-w 150
        -l "Target Curve"
        -ann "Select the ControlNode"
        -c "selectObj(1)";
    
    button
		-w 150
        -l "Offset Curve"
        -ann "Select the ControlNode"
        -c "selectObj(2)";
    
    showWindow ROGMenu;
	window -e -w 160 -h 400 ROGMenu;
}
//Run Procedure
rogMenu();