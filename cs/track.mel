 global proc buildTrack(float $tDist){cycleCheck -e off;//get data//Select Curve, Then The group with the Geometry, Then the gourp with the nurbs curves.string $sel[] = `ls -sl`;string $targetCurve = `rename $sel[0] trackCurve01`;string $trackPiece = `rename $sel[1] trackPiece1`;string $tNurbsNode = `rename $sel[2] nurbsGrp`;float $cPosX = `getAttr ($targetCurve + ".controlPoints[0].xValue")`;float $cPosY = `getAttr ($targetCurve + ".controlPoints[0].yValue")`;float $cPosZ = `getAttr ($targetCurve + ".controlPoints[0].zValue")`;string $cInfo = `arclen -ch on $targetCurve`;//variablesint $i = 0;int $n = 0;float $cLen = `getAttr ($cInfo + ".arcLength")`;float $slatLoc = 0;float $slatLength = $tDist;float $nSlats = ($cLen / (2 * $slatLength) );string $nurbsGroups[];string $t[];//create Curve Control Nodestring $tCNode = `createNode -n trackControlNode transform`;string $tCurvesNode = `createNode -n trackCurvesNode transform`;string $tPiecesNode = `group -n trackPiecesNode $trackPiece`;string $tLocNode = `createNode -n trackLocatorNode transform`;    //SetUpControlNode    addAttr -ln "trackControls"  -at bool  $tCNode;    setAttr -e-channelBox true ($tCNode + ".trackControls");    addAttr -ln "inverseUp"  -at bool  $tCNode;    setAttr -e-keyable true ($tCNode + ".inverseUp");    addAttr -ln "inverseFront"  -at bool  $tCNode;    setAttr -e-keyable true ($tCNode + ".inverseFront");    addAttr -ln "bank"  -at double $tCNode;    setAttr -e-keyable true ($tCNode + ".bank");    addAttr -ln "trackScale" -at double $tCNode;	setAttr -e-keyable true ($tCNode + ".trackScale") 1;    addAttr -multi -ln "grpList" -dt "string" $tCNode;    setAttr -lock true -keyable false -channelBox false ($tCNode + ".tx");    setAttr -lock true -keyable false -channelBox false ($tCNode + ".ty");    setAttr -lock true -keyable false -channelBox false ($tCNode + ".tz");    setAttr -lock true -keyable false -channelBox false ($tCNode + ".rx");    setAttr -lock true -keyable false -channelBox false ($tCNode + ".ry");    setAttr -lock true -keyable false -channelBox false ($tCNode + ".rz");    setAttr -lock true -keyable false -channelBox false ($tCNode + ".sx");    setAttr -lock true -keyable false -channelBox false ($tCNode + ".sy");    setAttr -lock true -keyable false -channelBox false ($tCNode + ".sz");    setAttr -lock true -keyable false -channelBox false ($tCNode + ".v");    //Arrange Track Structure    select -r $tNurbsNode;    string $nurbsList[] = `ls -dag -sl -tr`;    stringArrayRemoveAtIndex(0, $nurbsList);    for ($i = 0; $i < size($nurbsList); ++$i){		$nurbsList[$i] = `rename $nurbsList[$i] ("nurbsPiece" + $i)`;        $nurbsGroups[$i] = `group -n ("nurbsGrp" + $i) $nurbsList[$i]`;    }//Create Offset Curve for loopsstring $upCurve[] = `offsetCurve -ch on -rn false -cb 2 -st true -cl false -cr 0 -d 0 -tol 0.01 -sd 0 -ugn false  $targetCurve`;$upCurve = `parent $upCurve[0] $tCurvesNode`;string $objUpCurve = $upCurve[0];$t = `parent $targetCurve $tCurvesNode`;$targetCurve = $t[0];//build Trackstring $cLocOne;string $piece[];//move to beginning of Curvemove -a $cPosX $cPosY $cPosZ $trackPiece;    for ($i = 0; $i < size($nurbsList); ++$i){        move -a $cPosX $cPosY $cPosZ $nurbsList[$i];    }    for ($n = 0; $n < $nSlats; ++$n){        $slatLoc = ($slatLoc + (1 / $nSlats));        string $cLocArray[] = `spaceLocator -p 0 0 0`;        string $cLoc = $cLocArray[0];        if ($n == 0){            $cLocOne = $cLoc;        }        parent $cLoc $tLocNode;        select $cLoc $objUpCurve;        string $upPath = `pathAnimation -fractionMode true -follow true -followAxis z -upAxis y -worldUpType "object" -worldUpObject $cLoc            -inverseUp false            -inverseFront false            -bank true`;        disconnectAttr ($upPath +"_uValue.output") ($upPath + ".uValue");        setAttr ($upPath + ".uValue") $slatLoc;        string $cSlat[] = `instance $trackPiece`;        select $cSlat[0] $targetCurve;        string $motionPath = `pathAnimation -fractionMode true -follow true -followAxis z -upAxis y -worldUpType "object" -worldUpObject $cLoc            -inverseUp false            -inverseFront false            -bank true`;        disconnectAttr ($motionPath +"_uValue.output") ($motionPath + ".uValue");        setAttr ($motionPath + ".uValue") $slatLoc;        connectAttr -f ($tCNode + ".bank") ($motionPath + ".bankScale");        connectAttr -f ($tCNode + ".trackScale") ($cSlat[0] + ".sx");		connectAttr -f ($tCNode + ".trackScale") ($cSlat[0] + ".sy");		connectAttr -f ($tCNode + ".trackScale") ($cSlat[0] + ".sz");        //Nurbs        for ($i = 0; $i < size($nurbsList); ++$i){            $piece = `instance $nurbsList[$i]`;            select -r $piece[0] $targetCurve;            string $motionPath = `pathAnimation -fractionMode true -follow true -followAxis z -upAxis y -worldUpType "object" -worldUpObject $cLoc                    -inverseUp false                    -inverseFront false               -bank true`;            disconnectAttr ($motionPath +"_uValue.output") ($motionPath + ".uValue");               setAttr ($motionPath + ".uValue") $slatLoc;                connectAttr -f ($tCNode + ".bank") ($motionPath + ".bankScale");                connectAttr -f ($tCNode + ".trackScale") ($piece[0] + ".sx");                connectAttr -f ($tCNode + ".trackScale") ($piece[0] + ".sy");                connectAttr -f ($tCNode + ".trackScale") ($piece[0] + ".sz");        }    }		parent $targetCurve $tCurvesNode;	parent $tCurvesNode $tPiecesNode $tLocNode $tCNode;}global proc circleTrack(){    string $sel[] = `ls -sl`;	string $nurbsGrp = ($sel[0] + "|nurbsGrp");		select -r $nurbsGrp;	string $nurbsGrps[] = `listRelatives -type "transform"`;	    for ($i = 0; $i < size($nurbsGrps); ++$i){        select -r $nurbsGrps[$i];        $curves = `listRelatives -type "transform"`;        instance $curves[0];    }}global proc loftTrack(){    string $sel[] = `ls -sl`;	string $nurbsGrp = ($sel[0] + "|nurbsGrp");		select -r $nurbsGrp;	string $nurbsGrps[] = `listRelatives -type "transform"`;		string $lofts[];	    for ($i = 0; $i < size($nurbsGrps); ++$i){        select -r $nurbsGrps[$i];        $loft = `loft -ch 1 -u 1 -c 0 -ar 1 -d 3 -ss 1 -rn 0 -po 0 -rsn true $nurbsGrps[$i]`;        $lofts[$i] = $loft[0];    }	    string $trackLofts = `group -n trackLoftsNode $lofts`;	parent $trackLofts $sel[0];}global proc selectStartTrack(){	string $sel[] = `ls -sl`;	string $piece = ($sel[(size($sel)-1)] + "|trackPiecesNode");	string $nurbs = ($sel[(size($sel)-1)] + "|nurbsGrp");	stringArrayRemoveAtIndex((size($sel)-1), $sel);	string $origSel[] = $sel;		select -r $piece;	$sel = `listRelatives -type "transform"`;	$piece = $sel[0];		select -r $nurbs;	string $nurbsGrps[] = `listRelatives -type "transform"`;		string $curves[];	string $startCurves[];		for ($i = 0; $i < size($nurbsGrps); ++$i){		select -r $nurbsGrps[$i];        $curves = `listRelatives -type "transform"`;		$startCurves[$i] = $curves[0];	}	select -r $origSel $piece $startCurves;}global proc selectEndTrack(){	string $sel[] = `ls -sl`;	string $piece = ($sel[(size($sel)-1)] + "|trackPiecesNode");	string $nurbs = ($sel[(size($sel)-1)] + "|nurbsGrp");	stringArrayRemoveAtIndex((size($sel)-1), $sel);	string $origSel[] = $sel;	select -r $piece;	$sel = `listRelatives -type "transform"`;	$piece = $sel[(size($sel)-1)];	select -r $nurbs;	string $nurbsGrps[] = `listRelatives -type "transform"`;		string $curves[];	string $endCurves[];		for ($i = 0; $i < size($nurbsGrps); ++$i){		select -r $nurbsGrps[$i];        $curves = `listRelatives -type "transform"`;		$endCurves[$i] = $curves[(size($curves)-1)];	}	select -r $origSel $piece $endCurves;}global proc trackMenu(){    source generateChannelMenu.mel;	global string $floatField = "";     if(`window -q -ex Track_Menu`){      deleteUI Track_Menu;    }     window  -w 100 -h 700 -resizeToFitChildren 1 -title "Track Create Script" Track_Menu;     columnLayout ColumnLayout;	text -label "";    	text -label "distance between Tracks:";	$floatField = `floatField -v 10`;			text -l "";	    button        -label "Build Track"        -ann "Select: TrackControlNode"        -c "buildTrack(`floatField -q -v $floatField`)";	button        -label "Build Track Beams"        -ann "Select: TrackControlNode"        -c "loftTrack()";	button        -label "Add Track End to Selection"        -ann "ctrl - Select: TrackControlNode"        -c "selectEndTrack()";	button        -label "Add Track Start to Selection"        -ann "ctrl - Select: TrackControlNode"        -c "selectStartTrack()";    button        -label "Complete Circle"        -ann "Select: TrackControlNode"        -c "circleTrack()";    showWindow Track_Menu;}trackMenu()